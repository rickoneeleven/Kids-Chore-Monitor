Project Overview: Develop an automated Python application, "Kids Chore Monitor," to integrate Todoist task management with Sophos Firewall control. The application will monitor chore completion status for specific children (Daniel, Sophie) within designated Todoist sections. Based on whether their tasks are completed by a configurable daily cutoff time, the system will automatically enable or disable their respective internet access rules managed by the Sophos Firewall. The application relies on API interactions with both Todoist and Sophos, manages daily completion state via a JSON file, and utilizes configuration settings loaded from an .env file. Robust logging is essential for monitoring and troubleshooting.

- Phase 5: Logging and Error Handling Polish - Implement and review logging/error handling:
    - In `main.py::setup_logging`: Uncomment and configure file logging using `logging.FileHandler` and `config.LOG_FILE_PATH`. Consider adding log rotation (`logging.handlers.RotatingFileHandler`) for long-term use (e.g., max size, number of backups).
    - Review logging across all modules (`main.py`, `todoist_client.py`, `sophos_client.py`, `state_manager.py`): Ensure log messages provide sufficient context (timestamps, child names, rule names, API parameters where safe, state info). Check consistency of log levels (INFO for routine actions, WARNING for non-critical issues/retries/fail-safes, ERROR for failures that don't stop the whole run, CRITICAL for initialization failures or unhandled exceptions). Ensure exceptions are logged appropriately, including stack traces for unexpected errors (`exc_info=True`).
    - Review error handling: Verify that `try...except` blocks cover all external interactions (API calls, file I/O). Ensure custom exceptions are raised and caught appropriately. Confirm fail-safe logic in `main.py::process_child` correctly handles errors from `TodoistClient` and `SophosClient` (e.g., defaulting to enabling the rule if status cannot be confirmed).

- Phase 6: Deployment & Scheduling - Prepare and configure execution:
    - Set up the target execution environment (server, RPi, etc.) with Python and install dependencies using `pip install -r requirements.txt`.
    - Place the project code and the populated `.env` file in the execution directory. Ensure the `.env` file has appropriate permissions (readable by the execution user, but not world-readable).
    - Grant necessary file system permissions for the execution user to write to `config.LOG_FILE_PATH` and `config.STATE_FILE_PATH` in their respective locations.
    - Configure system scheduling (e.g., cron on Linux, Task Scheduler on Windows) to execute the `main.py` script at regular intervals (e.g., every 5, 10, or 15 minutes). Ensure the scheduler runs the script with the correct Python interpreter and within the correct working directory or specifies full paths. Redirect cron job output (`>/path/to/cron.log 2>&1`) to capture logs and errors.